<dependencies>
    <!-- Apache POI for Excel handling -->
    <dependency>
        <groupId>org.apache.poi</groupId>
        <artifactId>poi</artifactId>
        <version>5.0.0</version>
    </dependency>
    <dependency>
        <groupId>org.apache.poi</groupId>
        <artifactId>poi-ooxml</artifactId>
        <version>5.0.0</version>
    </dependency>
    <!-- Spring Data JPA -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-data-jpa</artifactId>
    </dependency>
    <!-- Your database driver, e.g., H2 -->
    <dependency>
        <groupId>com.h2database</groupId>
        <artifactId>h2</artifactId>
        <scope>runtime</scope>
    </dependency>
</dependencies>


import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import java.util.Date;

@Entity
public class TransactionEntity {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private Double amount;
    private Date date;
    private String refId;
    private String country;
    private String remarks;

    // Getters and setters
}

import org.apache.poi.ss.usermodel.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.io.IOException;
import java.io.InputStream;
import java.util.Iterator;

@Service
public class ExcelService {
    @Autowired
    private TransactionRepository transactionRepository;

    public void processExcelFile(InputStream excelFile) throws IOException {
        Workbook workbook = WorkbookFactory.create(excelFile);

        for (int sheetIndex = 0; sheetIndex < workbook.getNumberOfSheets(); sheetIndex++) {
            Sheet sheet = workbook.getSheetAt(sheetIndex);
            processSheet(sheet);
        }

        workbook.close();
    }

    private void processSheet(Sheet sheet) {
        Iterator<Row> rowIterator = sheet.iterator();

        // Skip header row if needed
        if (rowIterator.hasNext()) {
            rowIterator.next();
        }

        while (rowIterator.hasNext()) {
            Row row = rowIterator.next();
            TransactionEntity transactionEntity = createTransactionEntityFromRow(row);
            transactionRepository.save(transactionEntity);
        }
    }

    private TransactionEntity createTransactionEntityFromRow(Row row) {
        TransactionEntity transactionEntity = new TransactionEntity();
        transactionEntity.setAmount(row.getCell(0).getNumericCellValue());
        transactionEntity.setDate(row.getCell(1).getDateCellValue());
        transactionEntity.setRefId(row.getCell(2).getStringCellValue());
        transactionEntity.setCountry(row.getCell(3).getStringCellValue());
        transactionEntity.setRemarks(row.getCell(4).getStringCellValue());
        return transactionEntity;
    }
}

import org.springframework.data.jpa.repository.JpaRepository;

public interface TransactionRepository extends JpaRepository<TransactionEntity, Long> {
}


import org.apache.poi.ss.usermodel.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.io.IOException;
import java.io.InputStream;
import java.util.Iterator;

@Service
public class ExcelService {
    @Autowired
    private TransactionRepository transactionRepository;

    public void processExcelFile(InputStream excelFile) throws IOException {
        Workbook workbook = WorkbookFactory.create(excelFile);

        for (int sheetIndex = 0; sheetIndex < workbook.getNumberOfSheets(); sheetIndex++) {
            Sheet sheet = workbook.getSheetAt(sheetIndex);
            processSheet(sheet);
        }

        workbook.close();
    }

    private void processSheet(Sheet sheet) {
        Iterator<Row> rowIterator = sheet.iterator();

        // Skip header row if needed
        if (rowIterator.hasNext()) {
            rowIterator.next();
        }

        while (rowIterator.hasNext()) {
            Row row = rowIterator.next();
            TransactionEntity transactionEntity = createTransactionEntityFromRow(row);
            transactionRepository.save(transactionEntity);
        }
    }

    private TransactionEntity createTransactionEntityFromRow(Row row) {
        TransactionEntity transactionEntity = new TransactionEntity();
        transactionEntity.setAmount(row.getCell(0).getNumericCellValue());
        transactionEntity.setDate(row.getCell(1).getDateCellValue());
        transactionEntity.setRefId(row.getCell(2).getStringCellValue());
        transactionEntity.setCountry(row.getCell(3).getStringCellValue());
        transactionEntity.setRemarks(row.getCell(4).getStringCellValue());
        return transactionEntity;
    }
}


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;

@RestController
public class ExcelController {
    @Autowired
    private ExcelService excelService;

    @PostMapping("/upload")
    public void handleFileUpload(@RequestParam("file") MultipartFile file) throws IOException {
        excelService.processExcelFile(file.getInputStream());
    }
}

spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=password
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
